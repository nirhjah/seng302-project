plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
	id 'org.sonarqube' version '4.0.0.2929'
}

group = 'nz.ac.canterbury.seng302'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
//Team name ='r'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2'
	implementation 'io.github.cdimascio:dotenv-java:2.3.2'

	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.4'
	implementation "org.springframework.boot:spring-boot-starter-mail"

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.4'
	testImplementation "io.cucumber:cucumber-spring:7.5.0"
	testImplementation "io.cucumber:cucumber-java:7.5.0"
	testImplementation "com.microsoft.playwright:playwright:1.32.0"

	implementation "org.webjars.npm:axios:1.4.0"
}

configurations {
	cucumberRuntime {
		extendsFrom testImplementation
	}
}

tasks.register('integration') {
	dependsOn assemble, testClasses
	group = "verification"
	doLast {
		javaexec {
			main = "io.cucumber.core.cli.Main"
			classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
			args = [
					'--plugin', 'pretty',
					'--plugin', 'html:target/integration-report.html',
					'--glue', 'nz/ac/canterbury/seng302/tab/integration',
					'src/test/resources/features/integration'
			]
		}
	}
}

tasks.register('end2end') {
	dependsOn assemble, testClasses
	group = "verification"
	doLast {
		javaexec {
			main = "io.cucumber.core.cli.Main"
			classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
			args = [
					'--plugin', 'pretty',
					'--plugin', 'html:target/end2end-report.html',
					'--glue', 'nz/ac/canterbury/seng302/tab/end2end', // points to step definitions and Cucumber config. The root for this is the src/test/java package.
					'src/test/resources/features/end2end' // points to the feature files. The root for this is the project root.
			]
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

// Jacoco test coverage configuration
jacoco {
	toolVersion = "0.8.9"
}

// select what reports Jacoco generates and where to put them 
jacocoTestReport {
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/jacoco/test-report.xml")
		csv.enabled false
		html.destination file("${buildDir}/jacoco/html")
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "team-900"
		property "sonar.projectName", "team 900"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.host.url", "https://sonarqube.csse.canterbury.ac.nz"
		property "sonar.login", "$System.env.SONARQUBE_TOKEN"
		// For pipelines run for a branch build only
		if(System.env.CI_MERGE_REQUEST_IID == null || System.env.CI_MERGE_REQUEST_IID.trim().isEmpty()) {
			property "sonar.branch.name", "$System.env.CI_COMMIT_REF_NAME"
		} 
		// For pipelines run as part of a merge request
		else {
			property "sonar.pullrequest.key", "$System.env.CI_MERGE_REQUEST_IID"
			property "sonar.pullrequest.branch", "$System.env.CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
			property "sonar.pullrequest.base", "$System.env.CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
		}
	}
}

tasks.named("check") {
	dependsOn test, end2end, integration
}
