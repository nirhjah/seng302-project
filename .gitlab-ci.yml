stages:
  - tagChecking
  - build
  - test
  - sonarqube
  - deploy

tag-checker:
  stage: tagChecking
  script:
    - python3 tag_checker.py $CI_COMMIT_TAG
  only:
    - tags

junit:
  stage: test
  script:
    - ./gradlew test
    # TODO: when configuring SonarQube to show code coverage in tests, you will need to add some lines here
    # that keep the coverage report files generated by this job so that they can be uploaded to SonarQube

integration-tests:
  stage: test
  script:
    - ./gradlew integration

# builds all branches, except dev and master
branch-build:
  stage: build
  script:
    - ./gradlew bootJar
  artifacts:
    paths:
      - build/libs
  except:
    - tags
    - master
    - dev

deploy-staging:
  stage: deploy
  script:
    - ./gradlew bootJar
    - rm -rf /home/gitlab-runner/staging/ || true
    - mkdir /home/gitlab-runner/staging/
    - cp -r ./build/libs /home/gitlab-runner/staging
    - cp runner-scripts/staging.sh /home/gitlab-runner/staging.sh
    - chmod u+x /home/gitlab-runner/staging.sh
    - sudo systemctl restart staging-tab
  artifacts:
    paths:
      - build/libs
  only:
    - dev

deploy-production:
  stage: deploy
  script:
    - ./gradlew bootJar
    - rm -rf /home/gitlab-runner/production/ || true
    - mkdir /home/gitlab-runner/production/
    - cp -r ./build/libs /home/gitlab-runner/production
    - cp runner-scripts/production.sh /home/gitlab-runner/production.sh
    - chmod u+x /home/gitlab-runner/production.sh
    - sudo systemctl restart production-tab
  artifacts:
    paths:
      - build/libs
  only:
    - tags

endToEndTests:
  stage: e2eTests
  script:
    - ./gradlew end2end
  only:
    - dev